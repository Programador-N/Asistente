import threading
import datetime
import os
import json
import speech_recognition as sr
import pyttsx3
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.checkbox import CheckBox
from kivy.uix.slider import Slider
from kivy.clock import Clock

# Configuraci√≥n de la voz
def configurar_voz():
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    for voice in voices:
        if "spanish" in voice.name.lower() or "es" in voice.id:
            engine.setProperty('voice', voice.id)
            break
    engine.setProperty('rate', 145)
    return engine

# Hablar con voz
def hablar(engine, texto):
    def run():
        engine.say(texto)
        engine.runAndWait()
    threading.Thread(target=run, daemon=True).start()

# Escuchar al usuario
def escuchar():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Escuchando...")
        try:
            audio = recognizer.listen(source, timeout=5)  # Tiempo de espera m√°ximo
            texto = recognizer.recognize_google(audio, language="es-ES").lower()
            print("Entend√≠:", texto)
            return texto
        except sr.UnknownValueError:
            print("No entend√≠ el audio.")
            return "No entend√≠"
        except sr.RequestError:
            print("Error con el servicio de reconocimiento.")
            return "Error de conexi√≥n"
        except Exception as e:
            print(f"Ocurri√≥ un error inesperado: {e}")
            return "Error desconocido"

# Prompts para conversaci√≥n continua
def obtener_prompt_por_hora():
    hora_actual = datetime.datetime.now().hour
    if 6 <= hora_actual < 12:
        return "¬°Buenos d√≠as! üòä"
    elif 12 <= hora_actual < 18:
        return "¬°Buenas tardes! üåû"
    else:
        return "¬°Buenas noches! üåô"

PROMPTS_CONVERSACION = {
    "saludo": [
        "hola", "buenos d√≠as", "buenas tardes", "buenas noches",
        "qu√© tal", "c√≥mo est√°s", "hola, ¬øc√≥mo va todo?"
    ],
    "preguntas_iniciales": [
        "¬øC√≥mo est√°s hoy?",
        "¬øQu√© tal tu d√≠a hasta ahora?",
        "¬øEn qu√© puedo ayudarte hoy?",
        "¬øHay algo en lo que quieras pensar juntos?"
    ],
    "respuestas_emocionales": {
        "triste": [
            "Lamento escuchar eso. ¬øQuieres contarme m√°s sobre lo que te est√° afectando?",
            "Es v√°lido sentir tristeza. ¬øQu√© crees que podr√≠a ayudarte a sentirte mejor?"
        ],
        "feliz": [
            "¬°Me alegra mucho escuchar eso! ¬øHay algo en particular que te haya hecho sentir as√≠?",
            "La felicidad es maravillosa. ¬øQu√© has disfrutado hoy?"
        ],
        "ansioso": [
            "Entiendo que la ansiedad puede ser abrumadora. ¬øQu√© crees que est√° causando esa sensaci√≥n?",
            "Respira profundamente. ¬øQu√© piensas que podr√≠as hacer para calmarte?"
        ],
        "enojado": [
            "El enojo es una emoci√≥n natural. ¬øQu√© crees que te est√° haciendo sentir as√≠?",
            "A veces, el enojo nos dice algo importante. ¬øQuieres hablar m√°s sobre eso?"
        ],
        "neutral": [
            "Gracias por compartir c√≥mo te sientes. ¬øHay algo m√°s en lo que pueda ayudarte?",
            "Estoy aqu√≠ para escucharte. ¬øQu√© m√°s te gustar√≠a decir?"
        ]
    },
    "preguntas_seguimiento": [
        "¬øQu√© m√°s te gustar√≠a compartir?",
        "¬øC√≥mo te sientes acerca de eso?",
        "¬øQu√© crees que podr√≠as hacer al respecto?",
        "¬øTe gustar√≠a hablar de algo m√°s?"
    ],
    "despedida": [
        "Gracias por compartir tus pensamientos conmigo. Cu√≠date mucho.",
        "Siempre estar√© aqu√≠ cuando me necesites. Hasta luego.",
        "Que tengas un d√≠a lleno de paz y bienestar."
    ]
}

# Historial emocional del usuario
def guardar_estado_emocional(usuario, emocion, archivo="estado_emocional.json"):
    if os.path.exists(archivo):
        with open(archivo, "r", encoding="utf-8") as file:
            try:
                data = json.load(file)
            except json.JSONDecodeError:
                data = {}
    else:
        data = {}
    
    data[usuario] = emocion
    
    with open(archivo, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

def cargar_estado_emocional(usuario, archivo="estado_emocional.json"):
    if os.path.exists(archivo):
        with open(archivo, "r", encoding="utf-8") as file:
            try:
                data = json.load(file)
                return data.get(usuario, "neutral")
            except json.JSONDecodeError:
                return "neutral"
    return "neutral"

# Guardar perfil del usuario
def guardar_perfil_usuario(usuario, datos, archivo="perfil_usuario.json"):
    if os.path.exists(archivo):
        with open(archivo, "r", encoding="utf-8") as file:
            try:
                data = json.load(file)
            except json.JSONDecodeError:
                data = {}
    else:
        data = {}
    
    data[usuario] = datos
    
    with open(archivo, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

# Cargar perfil del usuario
def cargar_perfil_usuario(usuario, archivo="perfil_usuario.json"):
    if os.path.exists(archivo):
        with open(archivo, "r", encoding="utf-8") as file:
            try:
                data = json.load(file)
                return data.get(usuario, {})
            except json.JSONDecodeError:
                return {}
    return {}

# Datos iniciales del usuario
PERFIL_USUARIO = {
    "nombre": "Usuario",
    "edad": 22,
    "ocupaciones": ["programaci√≥n", "cocinero"],
    "proyectos": ["Construyendo un asistente virtual"],
    "horarios": {
        "estudio": ["ma√±ana", "siesta"],
        "trabajo": ["medio d√≠a", "noche"]
    }
}

# Guardar el perfil al iniciar
guardar_perfil_usuario("usuario", PERFIL_USUARIO)

# Interfaz gr√°fica con Kivy
class AsistenteVozApp(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.engine = configurar_voz()
        self.ultima_respuesta = ""
        self.usuario = "usuario"  # Nombre del usuario (puedes personalizarlo)
        self.modo_conversacion = None  # Puede ser "verde" o "rojo"
        self.contador_preguntas_verde = 0  # Contador para preguntas en modo verde

    def build(self):
        self.title = "Asistente Conversacional"
        layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
        
        # Reloj
        self.reloj_label = Label(text="Hora actual: --:--:--", size_hint_y=None, height=40)
        layout.add_widget(self.reloj_label)
        Clock.schedule_interval(self.actualizar_reloj, 1)  # Actualiza el reloj cada segundo
        
        # Instrucciones
        self.label_instruccion = Label(text="Presiona un bot√≥n para comenzar", size_hint_y=None, height=40)
        layout.add_widget(self.label_instruccion)
        
        # Bot√≥n Verde
        self.boton_verde = Button(text="Verde: Quiero ayuda o saber c√≥mo estoy", background_color=(0, 1, 0, 1))
        self.boton_verde.bind(on_press=self.iniciar_conversacion_verde)
        layout.add_widget(self.boton_verde)
        
        # Bot√≥n Rojo
        self.boton_rojo = Button(text="Rojo: No quiero ayuda y estoy sin energ√≠as", background_color=(1, 0, 0, 1))
        self.boton_rojo.bind(on_press=self.iniciar_conversacion_rojo)
        layout.add_widget(self.boton_rojo)
        
        # Bot√≥n Hablar
        self.boton_hablar = Button(text="Hablar")
        self.boton_hablar.bind(on_press=self.procesar_comando)
        layout.add_widget(self.boton_hablar)
        
        # Respuesta del Asistente
        self.label_respuesta = Label(text="", size_hint_y=None, height=80)
        layout.add_widget(self.label_respuesta)
        
        # Checkbox para responder con voz
        self.check_voz = CheckBox(active=True)
        self.check_voz_label = Label(text="Responder con voz", size_hint_y=None, height=40)
        layout.add_widget(self.check_voz)
        layout.add_widget(self.check_voz_label)
        
        # Slider de velocidad de voz
        self.slider_velocidad = Slider(min=100, max=200, value=145)
        self.slider_velocidad.bind(value=self.cambiar_velocidad)
        layout.add_widget(Label(text="Velocidad de voz"))
        layout.add_widget(self.slider_velocidad)
        
        # Bot√≥n Mostrar Historial
        self.boton_historial = Button(text="Mostrar Historial")
        self.boton_historial.bind(on_press=self.mostrar_historial)
        layout.add_widget(self.boton_historial)
        
        return layout

    def actualizar_reloj(self, dt):
        hora_actual = datetime.datetime.now().strftime("%H:%M:%S")
        self.reloj_label.text = f"Hora actual: {hora_actual}"

    def iniciar_conversacion_verde(self, instance):
        self.modo_conversacion = "verde"
        self.actualizar_estado("Iniciando conversaci√≥n de ayuda...")
        
        # Incrementar contador de preguntas
        self.contador_preguntas_verde += 1
        
        # Elegir pregunta seg√∫n el contador
        if self.contador_preguntas_verde == 1:
            mensaje = f"{obtener_prompt_por_hora()} {PROMPTS_CONVERSACION['preguntas_iniciales'][0]}"
        elif self.contador_preguntas_verde == 2:
            mensaje = PROMPTS_CONVERSACION["preguntas_seguimiento"][0]
        elif self.contador_preguntas_verde == 3:
            mensaje = PROMPTS_CONVERSACION["preguntas_seguimiento"][1]
        else:
            mensaje = "¬øHay algo m√°s en lo que pueda ayudarte hoy?"
        
        self.hablar_y_mostrar(mensaje)

    def iniciar_conversacion_rojo(self, instance):
        self.modo_conversacion = "rojo"
        self.actualizar_estado("Iniciando conversaci√≥n de baja energ√≠a...")
        mensaje = "Entiendo que no tienes energ√≠as en este momento. Si necesitas algo, estar√© aqu√≠ cuando quieras hablar."
        self.hablar_y_mostrar(mensaje)

    def procesar_comando(self, instance):
        self.actualizar_estado("Escuchando...")
        comando = escuchar()
        if comando == "No entend√≠":
            self.hablar_y_mostrar("Lo siento, no pude entenderte. ¬øPodr√≠as repetirlo?")
            return
        
        if self.modo_conversacion == "verde":
            respuesta = generar_respuesta_continua(comando, self.usuario)
            self.hablar_y_mostrar(respuesta)
        elif self.modo_conversacion == "rojo":
            if "ayuda" in comando or "sucede" in comando:
                respuesta = "Entiendo que algo te preocupa. ¬øQuieres contarme m√°s?"
                self.hablar_y_mostrar(respuesta)
            else:
                respuesta = "Estoy aqu√≠ si necesitas algo. Solo dime."
                self.hablar_y_mostrar(respuesta)
        else:
            respuesta = "Selecciona un modo (verde o rojo) para continuar."
            self.hablar_y_mostrar(respuesta)
        
        guardar_conversacion(comando, respuesta)
        self.actualizar_estado("Inactivo")

    def hablar_y_mostrar(self, texto):
        self.ultima_respuesta = texto
        self.label_respuesta.text = f"Asistente: {texto}"
        if self.check_voz.active:
            hablar(self.engine, texto)

    def cambiar_velocidad(self, instance, value):
        self.engine.setProperty('rate', value)

    def actualizar_estado(self, estado):
        self.label_instruccion.text = f"Estado: {estado}"

    def mostrar_historial(self, instance):
        historial = cargar_conversacion()
        if not historial:
            self.label_respuesta.text = "No hay historial disponible."
            return
        
        texto_historial = "\n".join(
            [f"Usuario: {interaccion['usuario']}\nAsistente: {interaccion['asistente']}\n"
             for interaccion in historial]
        )
        self.label_respuesta.text = f"Historial:\n{texto_historial}"

if __name__ == "__main__":
    AsistenteVozApp().run()